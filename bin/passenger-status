#!/usr/bin/env ruby
#  Phusion Passenger - http://www.modrails.com/
#  Copyright (C) 2008  Phusion
#
#  Phusion Passenger is a trademark of Hongli Lai & Ninh Bui.
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

$LOAD_PATH << File.expand_path(File.dirname(__FILE__) + "/../lib")
$LOAD_PATH << File.expand_path(File.dirname(__FILE__) + "/../ext")
require 'passenger/admin_tools/control_process'

include Passenger::AdminTools

# ANSI color codes
RESET   = "\e[0m"
BOLD    = "\e[1m"
YELLOW  = "\e[33m"
BLUE_BG = "\e[44m"

def show_status(control_process, format = :text)
	begin
		text = control_process.status
	rescue SystemCallError => e
		STDERR.puts "*** ERROR: Cannot query status for Passenger instance #{control_process.pid}:"
		STDERR.puts e.to_s
		exit 2
	end
	# Colorize output
	text.gsub!(/^(----)(.*)$/, YELLOW + BLUE_BG + BOLD + '\1\2' + RESET)
	text.gsub!(/^( +in '.*? )(.*?)\(/, '\1' + BOLD + '\2' + RESET + '(')
	puts text
end

def start
	if ARGV.empty?
		control_processes = ControlProcess.list
		if control_processes.empty?
			STDERR.puts("ERROR: Phusion Passenger doesn't seem to be running.")
			exit 2
		elsif control_processes.size == 1
			show_status(control_processes.first)
		else
			puts "It appears that multiple Passenger instances are running. Please select a"
			puts "specific one by running:"
			puts
			puts "  passenger-status <PID>"
			puts
			puts "The following Passenger instances are running:"
			control_processes.each do |control|
				puts "  PID: #{control.pid}"
			end
			exit 1
		end
	else
		show_status(ControlProcess.new(ARGV[0].to_i))
	end
end

start
